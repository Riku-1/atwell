// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AuthenticationUsecase is an autogenerated mock type for the AuthenticationUsecase type
type AuthenticationUsecase struct {
	mock.Mock
}

// BeforeLogin provides a mock function with given fields: nonce
func (_m *AuthenticationUsecase) BeforeLogin(nonce string) (string, error) {
	ret := _m.Called(nonce)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(nonce)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: code, nonce
func (_m *AuthenticationUsecase) Login(code string, nonce string) (string, error) {
	ret := _m.Called(code, nonce)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(code, nonce)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(code, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: code, nonce
func (_m *AuthenticationUsecase) SignUp(code string, nonce string) error {
	ret := _m.Called(code, nonce)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(code, nonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
